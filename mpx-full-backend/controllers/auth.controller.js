// controllers/auth.controller.js
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import User from "../models/User.js";

export const registerUser = async (req, res) => {
  try {
    const username = req.body?.username || "";
    const email = req.body?.email || "";
    const password = req.body?.password || "";

    if (!username || !email || !password) {
      return res.status(400).json({ message: "–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —É—Å—ñ –ø–æ–ª—è" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res.status(400).json({ message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      role: "–ì—Ä–∞–≤–µ—Ü—å",
      balance: 0,
      avatar: "default-avatar.webp",
    });

    await newUser.save();

    const token = jwt.sign({ id: newUser._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    res.status(201).json({ token });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" });
  }
};


export const loginUser = async (req, res) => {
  try {
    const usernameOrEmail = req.body?.usernameOrEmail || "";
    const password = req.body?.password || "";

    if (!usernameOrEmail || !password) {
      return res.status(400).json({ message: "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å" });
    }

    let user;
    if (usernameOrEmail.includes("@")) {
      user = await User.findOne({ email: usernameOrEmail });
    } else {
      user = await User.findOne({ username: usernameOrEmail });
    }

    if (!user) {
      return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({
      token,
      username: user.username, // üëà —Ü–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });
  }
};



export const getUserData = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password"); // –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–∞—Ä–æ–ª—å
    if (!user) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json(user); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  } catch (error) {
    console.error("Server Error:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
