// controllers/auth.controller.js
import bcrypt from "bcrypt";
import jwt from "jsonwebtoken";
import User from "../models/User.js";
import crypto from "crypto";
import { sendEmail } from "../utils/mailer.js";

export const registerUser = async (req, res) => {
  try {
    const { username, email, password } = req.body;

    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: "Email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è" });

    // üëâ –•–ï–®–£–Ñ–ú–û –ü–ê–†–û–õ–¨
    const hashedPassword = await bcrypt.hash(password, 10);

    const token = crypto.randomBytes(32).toString("hex");

    const newUser = new User({
      username,
      email,
      password: hashedPassword, // üëà –æ—Å—å —Ç—É—Ç —É–∂–µ —Ö–µ—à
      emailVerificationToken: token
    });

    await newUser.save();

    const verifyLink = `https://minecraftprojectx.com/verify-email?token=${token}`;
    await sendEmail(email, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏", `
      <h2>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!</h2>
      <p>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ —Å–≤–æ—é –ø–æ—à—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –Ω–∞ —Ü–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:</p>
      <a href="${verifyLink}">${verifyLink}</a>
    `);

    res.status(201).json({ message: "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—à—Ç—É." });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó", error });
  }
};

export const verifyEmail = async (req, res) => {
  try {
    const { token } = req.query;

    const user = await User.findOne({ emailVerificationToken: token });

    if (!user) {
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }

    user.emailVerificationToken = undefined;
    user.isEmailVerified = true;
    await user.save();

    res.status(200).json({ message: "–ü–æ—à—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ" });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—ñ –ø–æ—à—Ç–∏", error });
  }
};


export const loginUser = async (req, res) => {
  try {
    const usernameOrEmail = req.body?.usernameOrEmail || "";
    const password = req.body?.password || "";

    if (!usernameOrEmail || !password) {
      return res.status(400).json({ message: "–í–≤–µ–¥—ñ—Ç—å –ª–æ–≥—ñ–Ω —Ç–∞ –ø–∞—Ä–æ–ª—å" });
    }

    let user;
    if (usernameOrEmail.includes("@")) {
      user = await User.findOne({ email: usernameOrEmail });
    } else {
      user = await User.findOne({ username: usernameOrEmail });
    }

    if (!user) {
      return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: "7d",
    });

    res.json({
      token,
      username: user.username,
      isEmailVerified: user.isEmailVerified, // üëâ –¥–æ–¥–∞–π —Ü–µ, —â–æ–± —Ñ—Ä–æ–Ω—Ç –∑–Ω–∞–≤
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó" });
  }
};




export const getUserData = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password"); // –ù–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –ø–∞—Ä–æ–ª—å
    if (!user) {
      return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json(user); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  } catch (error) {
    console.error("Server Error:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

export const resendVerificationEmail = async (req, res) => {
  try {
    const { email } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    if (user.isEmailVerified) return res.status(400).json({ message: "–ü–æ—à—Ç–∞ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞" });

    const token = crypto.randomBytes(32).toString("hex");
    user.emailVerificationToken = token;
    await user.save();

    const verifyLink = `https://minecraftprojectx.com/verify-email?token=${token}`;

    await sendEmail(email, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø–æ—à—Ç–∏", `
      <h2>–ü–æ–≤—Ç–æ—Ä–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</h2>
      <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏:</p>
      <a href="${verifyLink}">${verifyLink}</a>
    `);

    res.json({ message: "–ü–æ—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ –ø–æ—à—Ç—É" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞" });
  }
};

export const requestPasswordReset = async (req, res) => {
  try {
    const { email } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(404).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º email –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    const resetToken = crypto.randomBytes(32).toString("hex");
    user.passwordResetToken = resetToken;
    user.passwordResetExpires = Date.now() + 3600000; // 1 –≥–æ–¥–∏–Ω–∞
    await user.save();

    const resetLink = `https://minecraftprojectx.com/reset-password?token=${resetToken}`;
    await sendEmail(email, "–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é", `
      <h2>–°–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é</h2>
      <p>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ, —â–æ–± –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å:</p>
      <a href="${resetLink}">${resetLink}</a>
    `);

    res.json({ message: "–õ–∏—Å—Ç —ñ–∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –∑–º—ñ–Ω—É –ø–∞—Ä–æ–ª—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é" });
  }
};

export const resetPassword = async (req, res) => {
  try {
    const { token, password } = req.body;

    const user = await User.findOne({
      passwordResetToken: token,
      passwordResetExpires: { $gt: Date.now() }
    });

    if (!user) {
      return res.status(400).json({ message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Ç–µ—Ä–º—ñ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–∫–µ–Ω" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    user.password = hashedPassword;
    user.passwordResetToken = undefined;
    user.passwordResetExpires = undefined;
    await user.save();

    res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—é:", error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};



