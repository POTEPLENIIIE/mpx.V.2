{"ast":null,"code":"import { __esDecorate, __runInitializers } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators, ReactiveFormsModule } from \"@angular/forms\";\nimport { CommonModule } from \"@angular/common\";\nimport { NavbarComponent } from \"../navbar/navbar.component\";\nimport { MatSnackBarModule } from \"@angular/material/snack-bar\";\nlet RegisterComponent = (() => {\n  let _classDecorators = [Component({\n    selector: \"app-register\",\n    standalone: true,\n    imports: [CommonModule, ReactiveFormsModule, NavbarComponent, MatSnackBarModule],\n    templateUrl: \"./register.component.html\",\n    styleUrls: [\"./register.component.scss\"]\n  })];\n  let _classDescriptor;\n  let _classExtraInitializers = [];\n  let _classThis;\n  var RegisterComponent = class {\n    static {\n      _classThis = this;\n    }\n    static {\n      const _metadata = typeof Symbol === \"function\" && Symbol.metadata ? Object.create(null) : void 0;\n      __esDecorate(null, _classDescriptor = {\n        value: _classThis\n      }, _classDecorators, {\n        kind: \"class\",\n        name: _classThis.name,\n        metadata: _metadata\n      }, null, _classExtraInitializers);\n      RegisterComponent = _classThis = _classDescriptor.value;\n      if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value: _metadata\n      });\n      __runInitializers(_classThis, _classExtraInitializers);\n    }\n    constructor(fb, authService, router, snackBar) {\n      this.fb = fb;\n      this.authService = authService;\n      this.router = router;\n      this.snackBar = snackBar;\n      this.showPassword = false;\n      this.registerForm = this.fb.group({\n        username: [\"\", [Validators.required, Validators.minLength(3)]],\n        email: [\"\", [Validators.required, Validators.email]],\n        password: [\"\", [Validators.required, Validators.minLength(6)]],\n        confirmPassword: [\"\", Validators.required]\n      }, {\n        validators: this.passwordMatchValidator\n      });\n    }\n    get username() {\n      return this.registerForm.get(\"username\");\n    }\n    get email() {\n      return this.registerForm.get(\"email\");\n    }\n    get password() {\n      return this.registerForm.get(\"password\");\n    }\n    togglePassword() {\n      this.showPassword = !this.showPassword;\n    }\n    passwordMatchValidator(form) {\n      const password = form.get(\"password\")?.value;\n      const confirm = form.get(\"confirmPassword\")?.value;\n      return password === confirm ? null : {\n        mismatch: true\n      };\n    }\n    onSubmit() {\n      if (this.registerForm.valid) {\n        const {\n          username,\n          email,\n          password\n        } = this.registerForm.value;\n        this.authService.register({\n          username,\n          email,\n          password\n        }).subscribe({\n          next: () => {\n            this.snackBar.open(\"Успішна реєстрація!\", \"Закрити\", {\n              duration: 3000,\n              panelClass: \"snackbar-success\"\n            });\n            this.router.navigate([\"/profile\"]);\n          },\n          error: err => {\n            console.error(err);\n            this.snackBar.open(err.error?.message || \"Помилка реєстрації\", \"Закрити\", {\n              duration: 3000,\n              panelClass: \"snackbar-error\"\n            });\n          }\n        });\n      }\n    }\n  };\n  return RegisterComponent = _classThis;\n})();\nexport { RegisterComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}